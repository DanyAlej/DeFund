/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Project } from "../Project";

export class Project__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _goal: BigNumberish,
    _charityName: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Project> {
    return super.deploy(
      _goal,
      _charityName,
      _description,
      overrides || {}
    ) as Promise<Project>;
  }
  getDeployTransaction(
    _goal: BigNumberish,
    _charityName: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _goal,
      _charityName,
      _description,
      overrides || {}
    );
  }
  attach(address: string): Project {
    return super.attach(address) as Project;
  }
  connect(signer: Signer): Project__factory {
    return super.connect(signer) as Project__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Project {
    return new Contract(address, _abi, signerOrProvider) as Project;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_goal",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_charityName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "balanceOfProject",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "charityAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "charityName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "donations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "donators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfDonors",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "goal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFunded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numberOfApprovals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_goal",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_charityName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "setProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDonated",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ca438038062000ca4833981810160405260608110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011157600080fd5b9083019060208201858111156200012757600080fd5b82516401000000008111828201881017156200014257600080fd5b82525081516020918201929091019080838360005b838110156200017157818101518382015260200162000157565b50505050905090810190601f1680156200019f5780820380516001836020036101000a031916815260200191505b5060405250508251620001bb91506000906020850190620001f9565b508051620001d1906001906020840190620001f9565b5050600380546001600160a01b03191633179055506009805460ff1916905560025562000295565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023c57805160ff19168380011785556200026c565b828001600101855582156200026c579182015b828111156200026c5782518255916020019190600101906200024f565b506200027a9291506200027e565b5090565b5b808211156200027a57600081556001016200027f565b6109ff80620002a56000396000f3fe6080604052600436106100d25760003560e01c80637284e4161161007a5780637284e416146103625780637c6543031461037757806387cb35401461038c578063ac62f566146103a1578063afcf2fc4146103e7578063cc6cb19a146103fc578063ed88c68e1461042f578063f441b1c814610437576100d2565b8062b37044146100d757806312424e3f146100fe5780631da32711146101155780632a87764f1461012a57806336f89bcd1461026757806340193883146102f157806354015cc5146103065780635d0341ba1461031b575b600080fd5b3480156100e357600080fd5b506100ec61044c565b60408051918252519081900360200190f35b34801561010a57600080fd5b50610113610452565b005b34801561012157600080fd5b506100ec6105c9565b34801561013657600080fd5b506101136004803603606081101561014d57600080fd5b81359190810190604081016020820135600160201b81111561016e57600080fd5b82018360208201111561018057600080fd5b803590602001918460018302840111600160201b831117156101a157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101f357600080fd5b82018360208201111561020557600080fd5b803590602001918460018302840111600160201b8311171561022657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105cf945050505050565b34801561027357600080fd5b5061027c610601565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b657818101518382015260200161029e565b50505050905090810190601f1680156102e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fd57600080fd5b506100ec61068f565b34801561031257600080fd5b506100ec610695565b34801561032757600080fd5b5061034e6004803603602081101561033e57600080fd5b50356001600160a01b0316610699565b604080519115158252519081900360200190f35b34801561036e57600080fd5b5061027c6106ae565b34801561038357600080fd5b5061034e610708565b34801561039857600080fd5b506100ec610711565b3480156103ad57600080fd5b506103cb600480360360208110156103c457600080fd5b5035610717565b604080516001600160a01b039092168252519081900360200190f35b3480156103f357600080fd5b506103cb61073e565b34801561040857600080fd5b506100ec6004803603602081101561041f57600080fd5b50356001600160a01b031661074d565b61011361075f565b34801561044357600080fd5b506100ec61081d565b60085490565b6000805b60055481108015610465575081155b156104a0576005818154811061047757fe5b6000918252602090912001546001600160a01b031633141561049857600191505b600101610456565b50806104f3576040805162461bcd60e51b815260206004820181905260248201527f4f6e6c7920646f6e6f72732063616e2063616c6c2074686973206d6574686f64604482015290519081900360640190fd5b3360009081526006602052604090205460ff1661053157336000908152600660205260409020805460ff191660019081179091556007805490910190555b61056460405180604001604052806012815260200171417070726f7665642c2072656c656173653f60701b815250610823565b6002546008541015801561057b5750600554600754145b156105c6576105be6040518060400160405280601e81526020017f52656c656173696e672066756e647320636f6e646974696f6e73206d65740000815250610823565b6105c66108c9565b50565b60055490565b600283905581516105e7906000906020850190610936565b5080516105fb906001906020840190610936565b50505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b505050505081565b60025481565b4790565b60066020526000908152604090205460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106875780601f1061065c57610100808354040283529160200191610687565b60095460ff1681565b60075481565b6005818154811061072457fe5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031681565b60046020526000908152604090205481565b60095460ff161515600114156107b8576040805162461bcd60e51b8152602060048201526019602482015278141c9bda9958dd081a5cc8185b1c9958591e48199d5b991959603a1b604482015290519081900360640190fd5b3360008181526004602052604081208054349081019091556005805460018101825592527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180546001600160a01b031916909217909155600880549091019055565b60085481565b6105c6816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561086757818101518382015260200161084f565b50505050905090810190601f1680156108945780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790529250610915915050565b6003546008546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610905573d6000803e3d6000fd5b506009805460ff19166001179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061097757805160ff19168380011785556109a4565b828001600101855582156109a4579182015b828111156109a4578251825591602001919060010190610989565b506109b09291506109b4565b5090565b5b808211156109b057600081556001016109b556fea2646970667358221220f772f0e5d8470480d37f14b8114cf3617931fa399bb8df5c9fbd57472550595564736f6c63430007030033";
