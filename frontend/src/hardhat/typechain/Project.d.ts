/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProjectInterface extends ethers.utils.Interface {
  functions: {
    "approvals(address)": FunctionFragment;
    "approve()": FunctionFragment;
    "balanceOfProject()": FunctionFragment;
    "charityAddress()": FunctionFragment;
    "charityName()": FunctionFragment;
    "currentAmount()": FunctionFragment;
    "description()": FunctionFragment;
    "donate()": FunctionFragment;
    "donations(address)": FunctionFragment;
    "donators(uint256)": FunctionFragment;
    "getNumberOfDonors()": FunctionFragment;
    "goal()": FunctionFragment;
    "isFunded()": FunctionFragment;
    "numberOfApprovals()": FunctionFragment;
    "setProject(uint256,string,string)": FunctionFragment;
    "totalDonated()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "approvals", values: [string]): string;
  encodeFunctionData(functionFragment: "approve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charityAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charityName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(functionFragment: "donations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "donators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDonors",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFunded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProject",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonated",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "charityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "charityName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDonors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFunded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDonated",
    data: BytesLike
  ): Result;

  events: {};
}

export class Project extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProjectInterface;

  functions: {
    approvals(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfProject(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfProject()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    charityAddress(overrides?: CallOverrides): Promise<[string]>;

    "charityAddress()"(overrides?: CallOverrides): Promise<[string]>;

    charityName(overrides?: CallOverrides): Promise<[string]>;

    "charityName()"(overrides?: CallOverrides): Promise<[string]>;

    currentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    "description()"(overrides?: CallOverrides): Promise<[string]>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "donate()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "donators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNumberOfDonors(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumberOfDonors()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    goal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "goal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isFunded(overrides?: CallOverrides): Promise<[boolean]>;

    "isFunded()"(overrides?: CallOverrides): Promise<[boolean]>;

    numberOfApprovals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfApprovals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setProject(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProject(uint256,string,string)"(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDonated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalDonated()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "approvals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfProject(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfProject()"(overrides?: CallOverrides): Promise<BigNumber>;

  charityAddress(overrides?: CallOverrides): Promise<string>;

  "charityAddress()"(overrides?: CallOverrides): Promise<string>;

  charityName(overrides?: CallOverrides): Promise<string>;

  "charityName()"(overrides?: CallOverrides): Promise<string>;

  currentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "currentAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  description(overrides?: CallOverrides): Promise<string>;

  "description()"(overrides?: CallOverrides): Promise<string>;

  donate(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "donate()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "donations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "donators(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumberOfDonors(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfDonors()"(overrides?: CallOverrides): Promise<BigNumber>;

  goal(overrides?: CallOverrides): Promise<BigNumber>;

  "goal()"(overrides?: CallOverrides): Promise<BigNumber>;

  isFunded(overrides?: CallOverrides): Promise<boolean>;

  "isFunded()"(overrides?: CallOverrides): Promise<boolean>;

  numberOfApprovals(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfApprovals()"(overrides?: CallOverrides): Promise<BigNumber>;

  setProject(
    _goal: BigNumberish,
    _charityName: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProject(uint256,string,string)"(
    _goal: BigNumberish,
    _charityName: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDonated(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDonated()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approvals(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(overrides?: CallOverrides): Promise<void>;

    "approve()"(overrides?: CallOverrides): Promise<void>;

    balanceOfProject(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfProject()"(overrides?: CallOverrides): Promise<BigNumber>;

    charityAddress(overrides?: CallOverrides): Promise<string>;

    "charityAddress()"(overrides?: CallOverrides): Promise<string>;

    charityName(overrides?: CallOverrides): Promise<string>;

    "charityName()"(overrides?: CallOverrides): Promise<string>;

    currentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<string>;

    "description()"(overrides?: CallOverrides): Promise<string>;

    donate(overrides?: CallOverrides): Promise<void>;

    "donate()"(overrides?: CallOverrides): Promise<void>;

    donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "donators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumberOfDonors(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfDonors()"(overrides?: CallOverrides): Promise<BigNumber>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    "goal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFunded(overrides?: CallOverrides): Promise<boolean>;

    "isFunded()"(overrides?: CallOverrides): Promise<boolean>;

    numberOfApprovals(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfApprovals()"(overrides?: CallOverrides): Promise<BigNumber>;

    setProject(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProject(uint256,string,string)"(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDonated(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDonated()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approvals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfProject(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfProject()"(overrides?: CallOverrides): Promise<BigNumber>;

    charityAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "charityAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    charityName(overrides?: CallOverrides): Promise<BigNumber>;

    "charityName()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "currentAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    "description()"(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "donate()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donators(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "donators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfDonors(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfDonors()"(overrides?: CallOverrides): Promise<BigNumber>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    "goal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFunded(overrides?: CallOverrides): Promise<BigNumber>;

    "isFunded()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfApprovals(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfApprovals()"(overrides?: CallOverrides): Promise<BigNumber>;

    setProject(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProject(uint256,string,string)"(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDonated(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDonated()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approvals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfProject(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfProject()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charityAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "charityAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charityName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "charityName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "description()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "donate()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDonors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumberOfDonors()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "goal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFunded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFunded()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfApprovals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfApprovals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProject(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProject(uint256,string,string)"(
      _goal: BigNumberish,
      _charityName: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDonated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalDonated()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
